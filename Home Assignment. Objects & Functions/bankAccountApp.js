/*Task 1. Create a bank account
Develop a banking system. To do that, first, create an object named “bankAccount”
with the following fields:
  “bankAccountID”, which is autogenerated
  “accountNumber”
  “credentials”, which is an array with a username, password, and pin
  “balance”, which is an amount of money
  “createdAt”, which is a date

Task 2. Create a user account
Create an object which represents a user account and has the following fields:
  “bankAccount”, which is an object from task 1
  “debitCard”, which is a card number
  “firstName”
  “lastName”
  “birthDate”
  “validID”, which is an array with a type of ID passport or driver’s license and
    the ID number
  “address”
*/
//===================================  start of DATABASE  =======================================
let usersAccount = {
  user0001: {
    bankAccount: {
      bankAccountID: "AB-0001", //this is autogenerated on a real system
      accountNumber: 1234567890123,
      credential: ["ThisNameIsNotReal", "NotObviousPassword", "112576"],
      balance: 11000000,
      createdAt: "09 October 2022",
    },
    debitCard: 1234567890123456,
    firstName: "Olive",
    lastName: "Yew",
    birthDate: "08 August 1988",
    validID: [
      { cardType: "TIN", cardNumber: 123456789012 },
      { cardType: "PHILHEALTH", cardNumber: 150000000000 },
    ],
    address: "Unknown Sts., Poblacion, TobeName City, FarawayProvince",
  },
  user0002: {
    bankAccount: {
      bankAccountID: "CD-0001",
      accountNumber: 534356412564138,
      credential: ["melodySunshine123", "sunShinePass143", "142567"],
      balance: 500000,
      createdAt: "10 October 2022",
    },
    debitCard: 5363272008875124,
    firstName: "Melody",
    lastName: "Sunshine",
    birthDate: "14 February 1975",
    validID: [
      { cardType: "TIN", cardNumber: 657897234000 },
      { cardType: "SSS", cardNumber: 08656756665 },
    ],
    address: "Sidebyside Sts., Poblacion, Your City, SoNearProvince",
  },
  user0003: {
    bankAccount: {
      bankAccountID: "CD-0002",
      accountNumber: 5343564132547854,
      credential: ["ThisIsmurray", "morerain325", "195671"],
      balance: 2500000,
      createdAt: "10 October 2022",
    },
    debitCard: 5363272065873547,
    firstName: "Murry",
    lastName: "Cod",
    birthDate: "26 December 1981",
    validID: [
      { cardType: "VIN", cardNumber: "13210142AF0672EMN20000-2" },
      { cardType: "SSS", cardNumber: 3354791235 },
    ],
    address: "Neighborhood Sts., Poblacion, Thier City, ImaginaryProvince",
  },
};
//===================================  end of DATABASE  =======================================

/* 
Task 3. Add functionality to the system
Outside the objects, create functions that enable interaction with a user’s bank
account:
  “getBankAccountDetails”, which checks if the username and password
    are correct and shows the bank account details
  “withdrawMoney”, which checks if the username and password are correct and
    enables getting money from the bank account using the account number
  “depositMoney”, which allows putting money in the bank account using
    the account number
  “getUsers”, which shows all the bank users’ names
  “addUser”, which allows adding a new user account
*/

//---------------------------start of getBankAccountDetails functionality
function getBankAccountDetails(username, password, callback) {
  // 1. check the username and password exist in the database
  if (callback(username, password) === undefined) {
    console.log(`ERROR - PLEASE TRY AGAIN`); // if not then print this message
  } else {
    // 2. if it exist
    let userkey = callback(username, password); // then get the key of that match
    console.log(`Bank ID: ${usersAccount[userkey].bankAccount.bankAccountID}`); //3. Print the bank account details of that match
    console.log(
      `Account Number: ${usersAccount[userkey].bankAccount.accountNumber}`
    );
    console.log(`Balance: ${usersAccount[userkey].bankAccount.balance}`);
    console.log(`Created At: ${usersAccount[userkey].bankAccount.createdAt}\n`);
  }
}
//--------------------------end of getBankAccountDetails functionality

//--------------------------start of withDrawMoney functionality
function withdrawMoney(
  username,
  password,
  amount = 0,
  accountNumber,
  callback
) {
  // 1. check the username and password exist in the database
  if (callback(username, password) === undefined) {
    console.log(`ERROR - PLEASE TRY AGAIN`); //if none print this message
  } else {
    let userkey = callback(username, password); //2. if it exist, check again the account number

    if (accountNumber !== usersAccount[userkey].bankAccount.accountNumber) {
      console.log(`WRONG ACCOUNT NUMBER INPUTTED`); // if not print this message
    } else {
      // 3. if it exist, then check again if the amount to be withdrawn is not greater than the balance
      if (usersAccount[userkey].bankAccount.balance > amount) {
        // 4. if the condition is true then calculate the withdrawal
        usersAccount[userkey].bankAccount.balance -= amount;
        console.log(
          `After Mr/Mrs ${usersAccount[userkey].firstName} ${usersAccount[userkey].lastName} withdrawn ${amount}, his/her new balance is ${usersAccount[userkey].bankAccount.balance}\n`
        );
      } else {
        // if not print this message
        console.log(
          `INSUFFICIENT BALANCE 🥺: The amount try to withdraw is \u20B1${amount} when the balance is only \u20B1${usersAccount[userkey].bankAccount.balance}\n`
        );
      }
    }
  }
}
//--------------------------end of withDrawMoney functionality

//--------------------------start of depositMoney functionality
function depositMoney(accountNumber, amount, callback) {
  if (callback(accountNumber) === undefined) {
    // 1. check the account number exist in the database
    //
    console.log(`ERROR - PLEASE TRY AGAIN`); // if not, print this message
  } else {
    let userkey = callback(accountNumber); // if exist, then calculate the amount and balance.
    usersAccount[userkey].bankAccount.balance += amount;
    console.log(
      `After Mr/Mrs ${usersAccount[userkey].firstName} ${usersAccount[userkey].lastName} deposited ${amount}, his/her new balance is ${usersAccount[userkey].bankAccount.balance}\n`
    );
  }
}
//--------------------------end of depositMoney functionality

//--------------------------start of getUsers functionality
function getUsers() {
  let i = 0; // just for presentation purposes
  for (const [key, { firstName, lastName }] of Object.entries(usersAccount)) {
    //1. loop the object entries, then using destructing assignment
    i++; //print the first name and the last name of each clients in the database
    console.log(`${i} --- ${firstName} ${lastName}`);
  }
  console.log(""); //just for spacing
}
//--------------------------end of getUsers functionality

//--------------------------start of addUser functionality
function addUser() {
  // this just imaginary addition of whole object item into the main object
  usersAccount.user0004 = {
    bankAccount: {
      bankAccountID: "AB-0001",
      accountNumber: 9876543210987,
      credential: ["peteTsar", "TsarPete56", "560257"],
      balance: 6500000,
      createdAt: "10 October 2022",
    },
    debitCard: 1234567890126545,
    firstName: "Pete",
    lastName: "Tsar",
    birthDate: "04 September 1998",
    validID: [
      { cardType: "TIN", cardNumber: 658723145000 },
      { cardType: "PHILHEALTH", cardNumber: 15654723100 },
    ],
    address: "Unknown Sts., Poblacion, TobeName City, FarawayProvince",
  };
}
//--------------------------end of addUser functionality

//################################# CALLBACK SECTION ################################

//--------------------------start of check username and password functionality
function usernameAndPasswordChecker(username, password) {
  let verifier = false; // this is the switch whether there is a match after the iteration
  for (const [
    key, // destructing assignment, to point us into credential
    {
      bankAccount: { credential },
    },
  ] of Object.entries(usersAccount)) {
    //if the match is found then return the item KEY of the object
    if (username === credential[0] && password === credential[1]) {
      verifier = true;
      return key;
    }
  }
  // if no match is found, print this message
  if (verifier === false) {
    console.log(`WRONG USERNAME and/or PASSWORD`);
  }
}
//--------------------------end of check username and password functionality

//--------------------------start of check account number functionality
function accountNumberChecker(toVerify) {
  let verifier = false; // this is the switch whether there is a match after the iteration
  for (const [
    key,
    {
      bankAccount: { accountNumber }, // destructing assignment, to point us into accountNumber
    },
  ] of Object.entries(usersAccount)) {
    //if the match is found then return the ITEM key of the object
    if (accountNumber === toVerify) {
      verifier = true;
      return key;
    }
  }
  // if no match is found, print this message
  if (verifier === false) {
    console.log(`account number doesn't exist`);
  }
}
//--------------------------end of check account number functionality
//################################################################################

//!!!!!!!!!!!!!!!!!!!!!!!!!!!!  TESTING OUTPUTS  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
getBankAccountDetails(
  "ThisIsmurray",
  "morerain325",
  usernameAndPasswordChecker
);

withdrawMoney(
  "ThisIsmurray",
  "morerain325",
  20000000,
  5343564132547854,
  usernameAndPasswordChecker
);

withdrawMoney(
  "ThisIsmurray",
  "morerain325",
  2000000,
  5343564132547854,
  usernameAndPasswordChecker
);

depositMoney(5343564132547854, 200000, accountNumberChecker);

getUsers();

addUser();

getUsers();

//console.log(usersAccount);

//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
